{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4086973c-1102-48d8-bcc0-aa63abf38f6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Loaded Successfully! ✅\n",
      "Dataset Preview:\n",
      "    Transaction_ID  User_ID  Transaction_Amount Transaction_Type  \\\n",
      "0          305660     4175              341.78       withdrawal   \n",
      "1          840039     1187             6435.22       withdrawal   \n",
      "2          558007     2718              477.72       withdrawal   \n",
      "3          781655     2337             9031.90       withdrawal   \n",
      "4          948672     1424             5572.46          deposit   \n",
      "\n",
      "             Transaction_Date Transaction_Location Merchant_Category  \\\n",
      "0  2025-01-27 00:02:26.651124                Paris        restaurant   \n",
      "1  2024-04-07 00:47:25.977203                Dubai            travel   \n",
      "2  2024-04-09 12:42:25.668988               Berlin        restaurant   \n",
      "3  2024-11-12 02:48:26.081949               Berlin       electronics   \n",
      "4  2024-11-20 07:40:26.813391                Dubai     entertainment   \n",
      "\n",
      "   Merchant_ID  Account_Balance_Before_Transaction  \\\n",
      "0         6631                             2616.95   \n",
      "1         2811                             7666.11   \n",
      "2         1435                             9295.15   \n",
      "3         8978                             4819.15   \n",
      "4         3808                             3891.67   \n",
      "\n",
      "   Account_Balance_After_Transaction  ...  Unusual_Transaction_Volume  \\\n",
      "0                            2275.17  ...                        True   \n",
      "1                            1230.89  ...                       False   \n",
      "2                            8817.43  ...                        True   \n",
      "3                           -4212.75  ...                        True   \n",
      "4                           -1680.79  ...                       False   \n",
      "\n",
      "   Unusual_Spending_Pattern  Login_Method Account_Type Account_Overdraft  \\\n",
      "0                      True           2FA     business              True   \n",
      "1                     False   fingerprint      savings              True   \n",
      "2                     False      password      savings              True   \n",
      "3                      True           2FA     business             False   \n",
      "4                      True           2FA      savings              True   \n",
      "\n",
      "  Transaction_Merchant_Rating IP_Address_Fraud_Risk_Score  \\\n",
      "0                    1.721018                    0.037631   \n",
      "1                    3.052629                    0.026650   \n",
      "2                    2.559417                    0.367662   \n",
      "3                    1.352050                    0.439665   \n",
      "4                    4.342739                    0.041248   \n",
      "\n",
      "   User_Recent_Activity_Level  Multi_Currency_Transaction  \\\n",
      "0                      medium                       False   \n",
      "1                      medium                        True   \n",
      "2                         low                       False   \n",
      "3                         low                       False   \n",
      "4                         low                        True   \n",
      "\n",
      "   Suspicious_Activity_Flag  \n",
      "0                     False  \n",
      "1                     False  \n",
      "2                     False  \n",
      "3                     False  \n",
      "4                      True  \n",
      "\n",
      "[5 rows x 40 columns]\n",
      "\n",
      "Data Preprocessing Completed! ✅\n",
      "Processed Data Sample:\n",
      "        Transaction_ID  User_ID  Transaction_Amount  Transaction_Type  \\\n",
      "48234          131898     1129             5077.32                 2   \n",
      "13004          915476     4340             2190.21                 1   \n",
      "42973          619689     2846             4029.96                 0   \n",
      "18393          686459     4057             7165.12                 0   \n",
      "38308          393851     2773             9527.12                 2   \n",
      "\n",
      "       Transaction_Date  Transaction_Location  Merchant_Category  Merchant_ID  \\\n",
      "48234             13943                     5                  2         4802   \n",
      "13004             21187                     7                  4         8840   \n",
      "42973             45022                     2                  4         6050   \n",
      "18393              3424                     6                  1         8175   \n",
      "38308             35323                     8                  5         7800   \n",
      "\n",
      "       Account_Balance_Before_Transaction  Account_Balance_After_Transaction  \\\n",
      "48234                             9554.63                            4477.31   \n",
      "13004                             8837.71                            6647.50   \n",
      "42973                             3025.33                           -1004.63   \n",
      "18393                             6459.00                            -706.12   \n",
      "38308                             2719.92                           -6807.20   \n",
      "\n",
      "       ...  Device_Fingerprint_Change  Unusual_Transaction_Volume  \\\n",
      "48234  ...                          1                           1   \n",
      "13004  ...                          0                           0   \n",
      "42973  ...                          0                           1   \n",
      "18393  ...                          0                           0   \n",
      "38308  ...                          0                           1   \n",
      "\n",
      "       Unusual_Spending_Pattern  Login_Method  Account_Type  \\\n",
      "48234                         1             2             1   \n",
      "13004                         0             2             1   \n",
      "42973                         0             0             0   \n",
      "18393                         0             1             2   \n",
      "38308                         0             0             0   \n",
      "\n",
      "       Account_Overdraft  Transaction_Merchant_Rating  \\\n",
      "48234                  1                     2.179229   \n",
      "13004                  1                     2.365522   \n",
      "42973                  1                     3.435715   \n",
      "18393                  0                     3.063303   \n",
      "38308                  0                     4.382306   \n",
      "\n",
      "       IP_Address_Fraud_Risk_Score  User_Recent_Activity_Level  \\\n",
      "48234                     0.733408                           0   \n",
      "13004                     0.235852                           0   \n",
      "42973                     0.227658                           0   \n",
      "18393                     0.966410                           2   \n",
      "38308                     0.327830                           1   \n",
      "\n",
      "       Multi_Currency_Transaction  \n",
      "48234                           1  \n",
      "13004                           0  \n",
      "42973                           1  \n",
      "18393                           0  \n",
      "38308                           1  \n",
      "\n",
      "[5 rows x 38 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SATULURI VINAY\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\sklearn\\linear_model\\_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "C:\\Users\\SATULURI VINAY\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Comparison Completed! ✅\n",
      "                 Model  Accuracy  Precision    Recall  F1-Score   ROC-AUC\n",
      "0  Logistic Regression    0.7000   0.000000  0.000000  0.000000  0.500000\n",
      "1        Random Forest    0.8478   1.000000  0.492667  0.660116  0.746333\n",
      "2              XGBoost    0.8424   0.957584  0.496667  0.654083  0.743619\n",
      "\n",
      "SMOTE Applied! ✅\n",
      "Resampled Class Distribution:\n",
      "Suspicious_Activity_Flag\n",
      "1    28000\n",
      "0    28000\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Feature Engineering Completed! ✅\n",
      "Selected Features:\n",
      " Index(['Transaction_ID', 'User_ID', 'Transaction_Amount', 'Transaction_Date',\n",
      "       'Merchant_ID', 'Account_Balance_Before_Transaction',\n",
      "       'Account_Balance_After_Transaction', 'Device_ID', 'IP_Address',\n",
      "       'Average_Transaction_Amount', 'Transaction_Speed',\n",
      "       'Transaction_Amount_Deviation', 'Fraudulent_Signature',\n",
      "       'Transaction_Merchant_Rating', 'IP_Address_Fraud_Risk_Score'],\n",
      "      dtype='object')\n",
      "\n",
      "Hyperparameter Tuning Completed! ✅\n",
      "Best Random Forest Params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 20, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 200, 'n_jobs': None, 'oob_score': False, 'random_state': 42, 'verbose': 0, 'warm_start': False}\n",
      "Best XGBoost Params: {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': 'logloss', 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': None, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 6, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 200, 'n_jobs': None, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}\n",
      "\n",
      "Random Forest Performance:\n",
      "Accuracy: 0.7722, Precision: 0.6380, Recall: 0.5563, F1-Score: 0.5944\n",
      "\n",
      "XGBoost Performance:\n",
      "Accuracy: 0.7351, Precision: 0.5559, Recall: 0.5813, F1-Score: 0.5684\n",
      "\n",
      "Ensemble Model Training Completed! ✅\n",
      "\n",
      "Final Model Saved Successfully! ✅\n",
      "\n",
      "Final Ensemble Model Performance:\n",
      "Accuracy: 0.7627, Precision: 0.6139, Recall: 0.5633, F1-Score: 0.5875\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Dataset Loading\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv(r\"C:\\Users\\SATULURI VINAY\\Downloads\\fraud_dataset.csv\")\n",
    "print(\"Dataset Loaded Successfully! ✅\")\n",
    "print(\"Dataset Preview:\\n\", df.head())\n",
    "\n",
    "# Step 2: Data Preprocessing\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "\n",
    "# Drop completely missing column (Check_Number)\n",
    "df = df.drop(columns=[\"Check_Number\"], errors=\"ignore\")\n",
    "\n",
    "# Encode categorical columns using Label Encoding\n",
    "categorical_columns = df.select_dtypes(include=[\"object\"]).columns\n",
    "label_encoders = {}\n",
    "for col in categorical_columns:\n",
    "    le = LabelEncoder()\n",
    "    df[col] = le.fit_transform(df[col])\n",
    "    label_encoders[col] = le\n",
    "\n",
    "# Convert boolean values to integers\n",
    "df = df.astype({col: \"int\" for col in df.select_dtypes(include=[\"bool\"]).columns})\n",
    "\n",
    "# Define features & target\n",
    "X = df.drop(columns=[\"Suspicious_Activity_Flag\"])\n",
    "y = df[\"Suspicious_Activity_Flag\"]\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "print(\"\\nData Preprocessing Completed! ✅\")\n",
    "print(\"Processed Data Sample:\\n\", X_train.head())\n",
    "\n",
    "# Step 3: Model Comparison\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n",
    "\n",
    "models = {\n",
    "    \"Logistic Regression\": LogisticRegression(),\n",
    "    \"Random Forest\": RandomForestClassifier(n_estimators=100, random_state=42),\n",
    "    \"XGBoost\": XGBClassifier(eval_metric=\"logloss\")\n",
    "}\n",
    "\n",
    "results = []\n",
    "for name, model in models.items():\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1 = f1_score(y_test, y_pred)\n",
    "    roc_auc = roc_auc_score(y_test, y_pred)\n",
    "    results.append([name, accuracy, precision, recall, f1, roc_auc])\n",
    "\n",
    "results_df = pd.DataFrame(results, columns=[\"Model\", \"Accuracy\", \"Precision\", \"Recall\", \"F1-Score\", \"ROC-AUC\"])\n",
    "print(\"\\nModel Comparison Completed! ✅\")\n",
    "print(results_df)\n",
    "\n",
    "# Step 4: Handling Imbalance with SMOTE\n",
    "from imblearn.over_sampling import SMOTE\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
    "print(\"\\nSMOTE Applied! ✅\")\n",
    "print(\"Resampled Class Distribution:\")\n",
    "print(pd.Series(y_train_resampled).value_counts())\n",
    "\n",
    "# Step 5: Feature Engineering\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "feature_selector = SelectFromModel(RandomForestClassifier(n_estimators=100, random_state=42))\n",
    "feature_selector.fit(X_train_resampled, y_train_resampled)\n",
    "X_train_selected = feature_selector.transform(X_train_resampled)\n",
    "X_test_selected = feature_selector.transform(X_test)\n",
    "selected_features = X.columns[feature_selector.get_support()]\n",
    "print(\"\\nFeature Engineering Completed! ✅\")\n",
    "print(\"Selected Features:\\n\", selected_features)\n",
    "\n",
    "# Step 6: Hyperparameter Tuning\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid_rf = {\"n_estimators\": [100, 200], \"max_depth\": [10, 20]}\n",
    "best_rf = GridSearchCV(RandomForestClassifier(random_state=42), param_grid_rf, cv=3, scoring='f1')\n",
    "best_rf.fit(X_train_selected, y_train_resampled)\n",
    "best_rf = best_rf.best_estimator_\n",
    "\n",
    "param_grid_xgb = {\"n_estimators\": [100, 200], \"max_depth\": [3, 6]}\n",
    "best_xgb = GridSearchCV(XGBClassifier(eval_metric='logloss'), param_grid_xgb, cv=3, scoring='f1')\n",
    "best_xgb.fit(X_train_selected, y_train_resampled)\n",
    "best_xgb = best_xgb.best_estimator_\n",
    "\n",
    "print(\"\\nHyperparameter Tuning Completed! ✅\")\n",
    "print(\"Best Random Forest Params:\", best_rf.get_params())\n",
    "print(\"Best XGBoost Params:\", best_xgb.get_params())\n",
    "\n",
    "# Step 7: Training and Evaluation\n",
    "def evaluate_model(name, y_test, y_pred):\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    f1 = f1_score(y_test, y_pred)\n",
    "    print(f\"\\n{name} Performance:\")\n",
    "    print(f\"Accuracy: {accuracy:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}, F1-Score: {f1:.4f}\")\n",
    "\n",
    "y_pred_rf = best_rf.predict(X_test_selected)\n",
    "y_pred_xgb = best_xgb.predict(X_test_selected)\n",
    "evaluate_model(\"Random Forest\", y_test, y_pred_rf)\n",
    "evaluate_model(\"XGBoost\", y_test, y_pred_xgb)\n",
    "\n",
    "# Step 8: Weighted Voting Classifier\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "weighted_voting_clf = VotingClassifier(estimators=[(\"RF\", best_rf), (\"XGB\", best_xgb)], voting=\"soft\", weights=[0.6, 0.4])\n",
    "weighted_voting_clf.fit(X_train_selected, y_train_resampled)\n",
    "print(\"\\nEnsemble Model Training Completed! ✅\")\n",
    "\n",
    "# Step 9: Saving the Model\n",
    "import joblib\n",
    "joblib.dump(weighted_voting_clf, \"final_fraud_detection_model.pkl\",compress=3)\n",
    "print(\"\\nFinal Model Saved Successfully! ✅\")\n",
    "\n",
    "# Step 10: Evaluating on Test Data\n",
    "final_model = joblib.load(\"final_fraud_detection_model.pkl\")\n",
    "final_pred = final_model.predict(X_test_selected)\n",
    "evaluate_model(\"Final Ensemble Model\", y_test, final_pred)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
